<!DOCTYPE html>
<html lang="{{@site.locale}}" class="{{#if @custom.fixed_navbar}}has-navbar-fixed-top{{/if}}">
  <head>
    {{!-- Document Settings --}}
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">    {{!-- Page Meta --}}
    <title>{{meta_title}}</title>
    
    {{!-- Mobile Meta --}}
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" type="text/css" href="{{asset 'css/app.min.css'}}" />
    <link rel="manifest" href="{{asset '/manifest.webmanifest'}}">
  
    {{!-- Styles'n'Scripts --}}
    <link rel="stylesheet" type="text/css" href="{{asset 'css/app.min.css'}}" />
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.2/src/duotone/style.css"/>
    {{!-- Ghost outputs important style and meta data with this tag --}}
    {{ghost_head}}
  </head>
  <body class="{{body_class}}">
    {{!-- Icons --}}
    <div class="is-hidden">
      {{> icon-sprite}}
    </div>
    {{> header}}
    <main class="main">
      {{{body}}}
    </main>

   {{!-- The footer at the very bottom --}}
    {{> footer}}

    {{!-- Ghost outputs important scripts and data with this tag --}}
    {{ghost_foot}}

    {{!-- Main theme scripts --}}
    <script async src="{{asset 'js/app.min.js'}}"></script>
    {{!-- Service Worker for PWA --}}
<script>
  if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js');
    });
  }
  /**
 * Handles the logic for a dark mode theme toggle.
 * It adds/removes a class to the <html> element and saves the
 * user's preference to localStorage.
 */
(() => {
    // --- Configuration ---
    // The class your CSS uses to apply the dark theme.
    const DARK_MODE_CLASS = 'is-dark-mode';

    // --- DOM Elements ---
    const htmlElement = document.documentElement;
    const themeToggle = document.getElementById('theme-toggle');
    const sunIcon = document.getElementById('theme-icon-sun');
    const moonIcon = document.getElementById('theme-icon-moon');

    // If any of the required elements are missing, stop execution.
    if (!themeToggle || !sunIcon || !moonIcon) {
        console.warn('Dark mode toggle elements not found. The toggle will not be initialized.');
        return;
    }

    // --- Functions ---
    const applyTheme = (theme) => {
        if (theme === 'dark') {
            htmlElement.classList.add(DARK_MODE_CLASS);
            sunIcon.classList.remove('is-hidden');
            moonIcon.classList.add('is-hidden');
            localStorage.setItem('theme', 'dark');
        } else {
            htmlElement.classList.remove(DARK_MODE_CLASS);
            sunIcon.classList.add('is-hidden');
            moonIcon.classList.remove('is-hidden');
            localStorage.setItem('theme', 'light');
        }
    };

    // --- Initialization ---
    // This part runs immediately to prevent a flash of incorrect theme.
    const storedTheme = localStorage.getItem('theme');
    const osPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const initialTheme = storedTheme ? storedTheme : (osPrefersDark ? 'dark' : 'light');

    // Apply the initial theme as soon as the script loads.
    applyTheme(initialTheme);
    
    // --- Event Listener ---
    // This part runs after the full page has loaded.
    document.addEventListener('DOMContentLoaded', () => {
        themeToggle.addEventListener('click', () => {
            const isDarkMode = htmlElement.classList.contains(DARK_MODE_CLASS);
            applyTheme(isDarkMode ? 'light' : 'dark');
        });
    });

})(); // The '()' at the end executes the function immediately. 
</script>
  </body>
</html>
